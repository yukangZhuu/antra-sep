## Understanding Data Types

1. What type would you choose for the following “numbers”?
   - A person’s telephone number           -> string
   - A person’s height                     -> float
   - A person’s age                        -> int
   - A person’s gender (Male, Female, Prefer Not To Answer)   -> enum
   - A person’s salary                     -> decimal
   - A book’s ISBN                         -> string
   - A book’s price                        -> decimal
   - A book’s shipping weight              -> float
   - A country’s population                -> ulong
   - The number of stars in the universe   -> ulong
   - The number of employees in each of the small or medium businesses in the United Kingdom (up to about 50,000 employees per business)
                                           -> int


2. What are the difference between value type and reference type variables? What is
boxing and unboxing?

value type vs. reference type:
- Storage of Values: Value types store actual data, whereas reference types store a memory address where the data is held.
- Memory Allocation: Value types are typically allocated on the stack, while reference types are allocated on the heap.
- Garbage Collection: The garbage collector manages reference types but not value types.
- Definition Methods: Value types are defined using struct and enum, while reference types are defined using class, interface, delegate, and arrays.
- Nullability: Value types cannot be null by default (but can be made nullable with "?"), whereas reference types can be null.

boxing & unboxing:
- Boxing is converting a value type (like int) to a reference type (like object). This involves copying the value into a new object on the heap.
- Unboxing is the reverse, converting a reference type back to a value type. This requires an explicit cast and copies the value back to the stack.



3. What is meant by the terms managed resource and unmanaged resource in .NET
- Managed Resources are those automatically managed by the .NET garbage collector. 
  This includes memory allocation and deallocation for objects like strings, lists, and other .NET framework types. 
  Developers don't need to manually manage these resources.

- Unmanaged Resources are resources not managed by the .NET garbage collector. 
  They include file handles, database connections, and network sockets, typically allocated by the operating system. 
  Developers are responsible for their proper allocation, usage, and cleanup, often using the IDisposable interface and Dispose method.


4. Whats the purpose of Garbage Collector in .NET?
The Garbage Collector (GC) in C# is an essential component of the .NET framework, designed for automatic memory management. 
It frees up memory by automatically deallocating objects that are no longer in use, preventing memory leaks. 
This process optimizes overall memory usage, enhances application performance, and maintains memory safety by avoiding invalid memory access. 
The GC's management of memory allocation and deallocation simplifies the developer's task, allowing us to focus more on application logic rather than on intricate memory management details.




## Controlling Flow and Converting Types

1. What happens when you divide an int variable by 0?
- The program will throw "System.DivideByZeroException: Attempted to divide by zero."


2. What happens when you divide a double variable by 0?
- The result will be Infinity. 


3. What happens when you overflow an int variable, that is, set it to a value beyond its
range?
- C# will not check for overflow, so when overflows happens, the value of the integer will wraps around to the other end of the range.


4. What is the difference between x = y++; and x = ++y;?
- x = y++;: Assigns the value of y to x, then increments y.
- x = ++y;: Increments y first, then assigns the new value of y to x.


5. What is the difference between break, continue, and return when used inside a loop
statement?
- break: Exits the loop now.
- continue: Skips to the next iteration of the loop.
- return: Exits the loop and the entire method.


6. What are the three parts of a for statement and which of them are required?
- Initialization, condition, and increment. The condition is required; others are optional.


7. What is the difference between the = and == operators?
- = is the assignment operator, used to assign a value to a variable.
- == is the equality comparison operator, used to compare two values for equality.


8. Does the following statement compile? for ( ; true; ) ;
- Yes, it compiles. It's an infinite loop.


9. What does the underscore _ represent in a switch expression?
- It represents the default keyword to signify that it should match anything if reached. 

10. What interface must an object implement to be enumerated over by using the foreach
statement?
- IEnumerable or IEnumerable<T>



