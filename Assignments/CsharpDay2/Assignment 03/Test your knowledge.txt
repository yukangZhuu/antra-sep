1. What are the six combinations of access modifier keywords and what do they do? 

public: Accessible from any other code in the same assembly or another assembly that references it.
protected internal: Accessible from the current assembly or from types that are derived from the containing class.
internal: Accessible only within its own assembly, but not from another assembly.
protected: Accessible only within its class and by derived class instances.
private protected: Accessible only within its containing class or types derived from the containing class within the current assembly.
private: Accessible only within the body of the class or the struct in which it is declared.


2. What is the difference between the static, const, and readonly keywords when applied to
a type member?

static: Means the member belongs to the type itself rather than to any specific object.
const: Indicates that the value of the variable cannot be modified after initialization and must be set at declaration.
readonly: Similar to const, but the readonly variable can be assigned or changed within a constructor, but cannot be modified later


3. What does a constructor do?

A constructor is a special kind of method called when an object is created and is used to initialize that object.


4. Why is the partial keyword useful?

The partial keyword allows the definition of a class, struct, or interface to be split into multiple files in the same namespace. 
This is useful for managing large code bases or when working with automatically generated source.


5. What is a tuple?

A tuple is a data structure that contains a sequence of elements of different types.


6. What does the C# record keyword do?

Record is a reference type that provides built-in functionality for encapsulating data. 
Unlike classes, records are value-based, meaning equality is determined by comparing the values of the properties, not the object references.
Records using positional syntax are immutable by default


7. What does overloading and overriding mean?

Overloading: Happens when two or more methods in the same scope have the same name but different parameters. 
It's a type of polymorphism that allows methods to perform different actions based on the input parameters.

Overriding: It's a feature that allows a derived class to provide a specific implementation of a method that is already defined in its base class. 
The method in the base class is marked with the virtual keyword, and the method in the derived class is marked with the override keyword.


8. What is the difference between a field and a property?

Field: A field is a variable of any type that is declared directly in a class or struct. Fields are used to store data.


9. How do you make a method parameter optional?

To make a parameter optional in C#, you can assign it a default value when you declare it in a method.


10. What is an interface and how is it different from abstract class?

Interface: An interface is a contract that defines a set of methods and properties that the implementing class must provide. 
An interface contains only the declarations. It cannot contain any implementation. 
A class can implement multiple interfaces.

Abstract Class: An abstract class, on the other hand, can contain both declarations and implementations of methods and properties. 
It's used as a base class for other classes. Unlike interfaces, a class can only inherit from one abstract class.


11. What accessibility level are members of an interface?

In C#, all members of an interface (methods, properties, events, etc.) are implicitly public, and you cannot specify any other access modifiers.


12. True/False. Polymorphism allows derived classes to provide different implementations
of the same method.
True


13. True/False. The override keyword is used to indicate that a method in a derived class is
providing its own implementation of a method.
True


14. True/False. The new keyword is used to indicate that a method in a derived class is
providing its own implementation of a method.
True


15. True/False. Abstract methods can be used in a normal (non-abstract) class. 
False. Abstract methods can only be declared in an abstract class.


16. True/False. Normal (non-abstract) methods can be used in an abstract class. 
True


17. True/False. Derived classes can override methods that were virtual in the base class. 
True


18. True/False. Derived classes can override methods that were abstract in the base class.
True


19. True/False. In a derived class, you can override a method that was neither virtual non abstract in the
base class.
False. Overriding requires the base method to be marked as virtual or abstract.


20. True/False. A class that implements an interface does not have to provide an
implementation for all of the members of the interface.
False. A class that implements an interface must provide an implementation for all of the members of the interface.


21. True/False. A class that implements an interface is allowed to have other members that
arenâ€™t defined in the interface.
True.


22. True/False. A class can have more than one base class.
False. In C#, a class cannot have more than one base class (i.e., no multiple inheritance of classes). 
However, it can implement multiple interfaces.


23. True/False. A class can implement more than one interface.
True.